name: 'Update Release Notes'
description: 'Updates or creates release notes'

inputs:
  version:
    description: 'Release version'
    required: true
  category:
    description: 'Release category'
    required: true
  subcategory:
    description: 'Release subcategory'
    required: true
  content:
    description: 'Release content'
    required: true
  github_token:
    description: 'GitHub token'
    required: true

runs:
  using: "composite"
  steps:
    - id: update-notes
      shell: bash
      run: |
        set -e
        
        TEMPLATE="
        ## WEB
        ### Changes
        ### Fixes
        ### etc

        ## ADMIN
        ### Changes
        ### Fixes
        ### etc

        ## COMMON
        ### Changes
        ### Fixes
        ### etc

        ## ETC
        "
        
        echo "Checking for existing release..."
        release_id=$(gh release view ${{ inputs.version }} --json id -q .id 2>/dev/null || echo '')
        echo "Release ID: $release_id"
        
        if [ -z "$release_id" ]; then
          echo "Creating new release notes..."
          echo "$TEMPLATE" > release_notes.md
          
          echo "Category: ${{ inputs.category }}"
          echo "Subcategory: ${{ inputs.subcategory }}"
          echo "Content to add: ${{ inputs.content }}"
          
          if [ "${{ inputs.category }}" == "ETC" ]; then
            echo "Adding to ETC section..."
            awk -v content="${{ inputs.content }}" '
                # "## ETC"를 찾으면 내용을 추가
                $0 ~ /^## ETC/ {
                    print
                    print content
                    next
                }
                # 기본적으로 현재 줄 출력
                {print}
            ' release_notes.md > release_notes.tmp && mv release_notes.tmp release_notes.md
          else
            echo "Adding to ${{ inputs.category }} / ${{ inputs.subcategory }} section..."
            awk -v category="## ${{ inputs.category }}" \
                -v subcategory="### ${{ inputs.subcategory }}" \
                -v content="${{ inputs.content }}" '
                # 카테고리 시작을 찾으면 in_category 플래그를 설정
                $0 ~ category {in_category=1; print; next}

                # 다음 카테고리로 넘어가면 플래그를 해제
                in_category && $0 ~ /^## / {in_category=0}

                # 서브카테고리를 찾으면, 해당 서브카테고리 아래에 새 내용 추가
                in_category && $0 ~ subcategory {
                    print
                    print content
                    next
                }

                # 기본적으로 현재 줄 출력
                {print}
            ' release_notes.md > release_notes.tmp && mv release_notes.tmp release_notes.md
          fi
          
          echo "Creating new release..."
          gh release create ${{ inputs.version }} --draft --title "${{ inputs.version }}" --notes-file release_notes.md
        else
          echo "Updating existing release notes..."
          gh release view ${{ inputs.version }} --json body -q .body > release_notes.md
          
          echo "Current release notes content:"
          cat release_notes.md
          
          echo "Category: ${{ inputs.category }}"
          echo "Subcategory: ${{ inputs.subcategory }}"
          echo "Content to add: ${{ inputs.content }}"
          
          if [ "${{ inputs.category }}" == "ETC" ]; then
            echo "Adding to ETC section..."
            awk -v content="${{ inputs.content }}" '
              /^## ETC/ {
                print $0
                print content
                next
              }
              {print}
            ' release_notes.md > release_notes.tmp && mv release_notes.tmp release_notes.md
          else
            echo "Adding to ${{ inputs.category }} / ${{ inputs.subcategory }} section..."
            awk -v category="## ${{ inputs.category }}" \
                -v subcategory="### ${{ inputs.subcategory }}" \
                -v content="${{ inputs.content }}" '
              $0 ~ category {in_category=1; print; next}
              in_category && $0 ~ /^## / {in_category=0}
              in_category && $0 ~ subcategory {
                print
                print content
                next
              }
              {print}
            ' release_notes.md > release_notes.tmp && mv release_notes.tmp release_notes.md
          fi
          
          echo "Updated release notes content:"
          cat release_notes.md
          
          echo "Updating release..."
          gh release edit ${{ inputs.version }} --notes-file release_notes.md
        fi
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}