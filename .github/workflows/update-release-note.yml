name: Auto Release Notes

on:
  pull_request:
    types: [closed]
    branches:
      - 'RB-*'

jobs:
  update-release-notes:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get branch name
        id: branch-name
        run: echo "::set-output name=branch::${GITHUB_BASE_REF#RB-}"

      - name: Get PR details
        id: pr-details
        run: |
          echo "::set-output name=title::${{ github.event.pull_request.title }}"
          echo "::set-output name=number::${{ github.event.pull_request.number }}"
          echo "::set-output name=labels::${{ toJson(github.event.pull_request.labels.*.name) }}"
          echo "::set-output name=compare_branch::${{ github.event.pull_request.head.ref }}"

      - name: Update or create release notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.branch-name.outputs.branch }}
          PR_TITLE: ${{ steps.pr-details.outputs.title }}
          PR_NUMBER: ${{ steps.pr-details.outputs.number }}
          PR_LABELS: ${{ steps.pr-details.outputs.labels }}
          COMPARE_BRANCH: ${{ steps.pr-details.outputs.compare_branch }}
        run: |
          release_id=$(gh release view $VERSION --json id -q .id || echo '')
          
          # Check if PR should be skipped
          if echo "$PR_LABELS" | jq -e 'contains(["skip-release-note"])' > /dev/null; then
            echo "Skipping release note for this PR"
            exit 0
          fi
          
          # Initialize template
          template="# Release $VERSION

          ## WEB
          ### Changes
          ### Bug fixes
          ### etc

          ## ADMIN
          ### Changes
          ### Bug fixes
          ### etc

          ## COMMON
          ### Changes
          ### Bug fixes
          ### etc

          ## ETC
          "
          
          # Determine category and subcategory
          category="ETC"
          subcategory=""
          
          if echo "$PR_LABELS" | jq -e 'map(select(startswith("common-"))) | length > 0' > /dev/null; then
            category="COMMON"
            if [[ "$COMPARE_BRANCH" == feat* ]]; then
              subcategory="Changes"
            elif [[ "$COMPARE_BRANCH" == fix* || "$COMPARE_BRANCH" == membersus* || "$COMPARE_BRANCH" == jira* ]]; then
              subcategory="Bug fixes"
            else
              subcategory="etc"
            fi
          elif echo "$PR_LABELS" | jq -e 'contains(["ntrance_web"])' > /dev/null; then
            category="WEB"
            if [[ "$COMPARE_BRANCH" == feat* ]]; then
              subcategory="Changes"
            elif [[ "$COMPARE_BRANCH" == fix* || "$COMPARE_BRANCH" == membersus* || "$COMPARE_BRANCH" == jira* ]]; then
              subcategory="Bug fixes"
            else
              subcategory="etc"
            fi
          elif echo "$PR_LABELS" | jq -e 'contains(["ntrance_admin"])' > /dev/null; then
            category="ADMIN"
            if [[ "$COMPARE_BRANCH" == feat* ]]; then
              subcategory="Changes"
            elif [[ "$COMPARE_BRANCH" == fix* || "$COMPARE_BRANCH" == membersus* || "$COMPARE_BRANCH" == jira* ]]; then
              subcategory="Bug fixes"
            else
              subcategory="etc"
            fi
          fi
          
          # Prepare new content
          new_content="- $PR_TITLE (#$PR_NUMBER)"
          
          if [ -z "$release_id" ]; then
            # Create new release with template
            echo "$template" > release_notes.md
            # Add new content to appropriate section
            if [ "$category" == "ETC" ]; then
              sed -i "s/## ETC/## ETC\n$new_content/" release_notes.md
            else
              sed -i "/## $category/,/## / s/### $subcategory/### $subcategory\n$new_content/" release_notes.md
            fi
            gh release create $VERSION --draft --title "Release $VERSION" --notes-file release_notes.md
          else
            # Update existing release
            gh release view $VERSION --json body -q .body > release_notes.md
            if [ "$category" == "ETC" ]; then
              sed -i "/## ETC/a $new_content" release_notes.md
            else
              sed -i "/## $category/,/## / s/### $subcategory/### $subcategory\n$new_content/" release_notes.md
            fi
            gh release edit $VERSION --notes-file release_notes.md
          fi